name: CI/CD Pipeline for Vite React App

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test || echo "No tests found"
        
      - name: Run Linting
        run: npm run lint || echo "No lint script found"

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Build Project
        run: npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist
          retention-days: 1

  dockerize:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Generate Image Tag
        id: tag
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          echo "sha_tag=${SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "date_tag=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/vite-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/vite-app:${{ steps.tag.outputs.sha_tag }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vite-app:latest
          cache-to: type=inline

  deploy:
    needs: dockerize
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Create k8s Directory
        run: mkdir -p k8s
        
      - name: Set Image Tag
        id: set-tag
        run: |
          SHA_SHORT=$(echo ${{ github.sha }} | cut -c1-7)
          echo "sha_tag=${SHA_SHORT}" >> $GITHUB_OUTPUT
        
      - name: Create Kubernetes Deployment Files
        run: |
          cat > k8s/namespace.yaml << EOF
          apiVersion: v1
          kind: Namespace
          metadata:
            name: vite-app
          EOF
          
          cat > k8s/deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: vite-app
            namespace: vite-app
            labels:
              app: vite-app
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: vite-app
            template:
              metadata:
                labels:
                  app: vite-app
              spec:
                containers:
                - name: vite-app
                  image: ${{ secrets.DOCKERHUB_USERNAME }}/vite-app:${{ steps.set-tag.outputs.sha_tag }}
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 80
                  resources:
                    limits:
                      cpu: "500m"
                      memory: "512Mi"
                    requests:
                      cpu: "200m"
                      memory: "256Mi"
                  livenessProbe:
                    httpGet:
                      path: /
                      port: 80
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /
                      port: 80
                    initialDelaySeconds: 5
                    periodSeconds: 5
          EOF
          
          cat > k8s/service.yaml << EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: vite-app-service
            namespace: vite-app
          spec:
            selector:
              app: vite-app
            ports:
            - port: 80
              targetPort: 80
            type: NodePort
          EOF
          
          cat > k8s/ingress.yaml << EOF
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: vite-app-ingress
            namespace: vite-app
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
          spec:
            rules:
            - http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: vite-app-service
                      port:
                        number: 80
          EOF
          
      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          
      - name: Verify Deployment
        run: |
          echo "Waiting for deployment to be ready..."
          kubectl -n vite-app rollout status deployment/vite-app --timeout=180s
          
      - name: Get Service Details
        run: |
          NODE_PORT=$(kubectl -n vite-app get svc vite-app-service -o jsonpath='{.spec.ports[0].nodePort}')
          echo "Application deployed successfully! Access it at http://$(hostname -I | awk '{print $1}'):${NODE_PORT}"
          
  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Success
        if: ${{ success() }}
        run: |
          echo "Deployment completed successfully!"
          # Add notification integrations here (Slack, Discord, email, etc.)
          # Example for Slack:
          # curl -X POST -H 'Content-type: application/json' --data '{"text":"✅ Deployment to Kind cluster successful!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify Failure
        if: ${{ failure() }}
        run: |
          echo "Deployment failed!"
          # Add notification integrations here
          # Example for Slack:
          # curl -X POST -H 'Content-type: application/json' --data '{"text":"❌ Deployment to Kind cluster failed!"}' ${{ secrets.SLACK_WEBHOOK_URL }}