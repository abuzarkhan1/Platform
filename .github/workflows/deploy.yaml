name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Build Project
        run: npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist

  dockerize:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/vite-app:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vite-app:latest
          cache-to: type=inline

  deploy-k8s:
    needs: dockerize
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
      
      # Set up port forwarding for Kind cluster
      - name: Setup Kind port forwarding
        run: |
          # Create a temporary kubeconfig file
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
          
          # Start port forwarding in the background
          # Kind runs on localhost with a specific port (46853 from your kubeconfig)
          # Install socat to forward traffic between the localhost port and the GitHub runner
          sudo apt-get update && sudo apt-get install -y socat
          nohup socat TCP-LISTEN:46853,fork TCP:127.0.0.1:46853 &
          
          # Create a modified kubeconfig that points to the GitHub runner instead of localhost
          sed -i 's/127.0.0.1:46853/localhost:46853/g' kubeconfig.yaml
          
          # Export the modified kubeconfig
          export KUBECONFIG=$(pwd)/kubeconfig.yaml
          echo "KUBECONFIG=$(pwd)/kubeconfig.yaml" >> $GITHUB_ENV
          
          # Test connection
          kubectl --kubeconfig=$(pwd)/kubeconfig.yaml version
      
      # Deploy to Kubernetes
      - name: Create K8s Deployment Files
        run: |
          # Create deployment.yaml
          cat <<EOF > deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: vite-app
            namespace: default
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: vite-app
            template:
              metadata:
                labels:
                  app: vite-app
              spec:
                containers:
                - name: vite-app
                  image: ${{ secrets.DOCKERHUB_USERNAME }}/vite-app:latest
                  ports:
                  - containerPort: 80
          EOF
          
          # Create service.yaml
          cat <<EOF > service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: vite-app-service
            namespace: default
          spec:
            selector:
              app: vite-app
            ports:
            - port: 80
              targetPort: 80
            type: ClusterIP
          EOF
      
      - name: Deploy to Kind Cluster
        run: |
          # Apply deployment
          kubectl --kubeconfig=$(pwd)/kubeconfig.yaml apply -f deployment.yaml
          
          # Wait for deployment
          kubectl --kubeconfig=$(pwd)/kubeconfig.yaml rollout status deployment/vite-app --timeout=120s
          
          # Apply service
          kubectl --kubeconfig=$(pwd)/kubeconfig.yaml apply -f service.yaml
          
          # Get deployment status
          kubectl --kubeconfig=$(pwd)/kubeconfig.yaml get pods -l app=vite-app
          kubectl --kubeconfig=$(pwd)/kubeconfig.yaml get services vite-app-service